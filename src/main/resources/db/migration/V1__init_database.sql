CREATE TABLE confirmation_token
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token        VARCHAR(255),
    created_at   TIMESTAMP WITHOUT TIME ZONE,
    expires_at   TIMESTAMP WITHOUT TIME ZONE,
    confirmed_at TIMESTAMP WITHOUT TIME ZONE,
    user_id      BIGINT,
    CONSTRAINT pk_confirmation_token PRIMARY KEY (id)
);

CREATE TABLE password_reset_token
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token      VARCHAR(255),
    created_at TIMESTAMP WITHOUT TIME ZONE,
    expires_at TIMESTAMP WITHOUT TIME ZONE,
    reset_at   TIMESTAMP WITHOUT TIME ZONE,
    user_id    BIGINT,
    CONSTRAINT pk_password_reset_token PRIMARY KEY (id)
);

CREATE TABLE roles
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE "user's roles"
(
    role_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL
);

CREATE TABLE users
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email        VARCHAR(255)                            NOT NULL,
    username     VARCHAR(255)                            NOT NULL,
    password     VARCHAR(255)                            NOT NULL,
    is_enabled   BOOLEAN                                 NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE,
    updated_date TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE users
    ADD CONSTRAINT uc_users_email UNIQUE (email);

ALTER TABLE users
    ADD CONSTRAINT uc_users_username UNIQUE (username);

ALTER TABLE confirmation_token
    ADD CONSTRAINT FK_CONFIRMATION_TOKEN_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE password_reset_token
    ADD CONSTRAINT FK_PASSWORD_RESET_TOKEN_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE "user's roles"
    ADD CONSTRAINT fk_use_on_role FOREIGN KEY (role_id) REFERENCES roles (id);

ALTER TABLE "user's roles"
    ADD CONSTRAINT fk_use_on_user FOREIGN KEY (user_id) REFERENCES users (id);